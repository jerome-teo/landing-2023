import { error } from '@sveltejs/kit';
import type { RequestEvent } from "./$types";
import * as EmailValidator from 'email-validator';
// import { SERVICE_ACCT_EMAIL, PRIVATE_KEY } from '$env/static/private';
import { GoogleSpreadsheet } from "google-spreadsheet";

const SHEET_ID = "AKfycbwSZuo3-sWQLk-t2GXUt13A8qm36ZFhaRk48fn-ZYS4ylTXI2c-34gasxa17P_PGXgP"
const GOOGLE_APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbwSZuo3-sWQLk-t2GXUt13A8qm36ZFhaRk48fn-ZYS4ylTXI2c-34gasxa17P_PGXgP/exec';

export async function POST({ request }: RequestEvent): Promise<Response> {
  // console.log("Processing POST request")
  // const email = url.searchParams.get("email");
  // if (email === null || !EmailValidator.validate(email)) {
  //   console.error("Email not provided or failed to validate")
  //   throw error(400, "Please provide a valid email")
  // }
  try {
    const data = await request.json(); // Get the request body data
    const response = await fetch(GOOGLE_APPS_SCRIPT_URL, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'text/plain;charset=utf-8',
      },
    });

    // Forward the response back to the client
    const responseText = await response.text();
    if (response.ok) {
      return new Response(responseText, { status: 200 });
    } else {
      console.error('Google Apps Script error', responseText);
      throw error(response.status, responseText);
    }
  } catch (err) {
    console.error('Error handling request', err);
    throw error(500, 'Internal Server Error');
  }

  // if (token === null) {
  //   console.error("No recaptcha token provied")
  //   throw error(400, "Please provide a recatpcha token")
  // } else {
  //   const resp = await validateCaptcha(token);
  //   console.log(resp)
  //   // If we should fail...
  //   if (resp.score < 0.6 || resp.action != "submit") {
  //     console.error("Recaptcha token failed to validate")
  //     throw error(500, "Internal server error")
  //   }
  // }

  // const prisma = new PrismaClient();
  // const res = await prisma.userEntry.create({
  //   data: {
  //     email: email
  //   }
  // })

  const doc = new GoogleSpreadsheet(SHEET_ID);

  // await doc.useServiceAccountAuth({
  //   // env var values are copied from service account credentials generated by google
  //   // see "Authentication" section in docs for more info
  //   client_email: SERVICE_ACCT_EMAIL,
  //   private_key: PRIVATE_KEY,
  // });

  await doc.loadInfo();

  const sheet = doc.sheetsByIndex[0];
  // await sheet.addRow({ email });

  return new Response("Ok");
}